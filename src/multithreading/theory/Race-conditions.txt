Race conditions can occur when two or more threads read and write the same variable according to one of these two patterns:
the situation where two threads compete for the same resource, where the sequence in which the resource is accessed is significant, is called race conditions.
A code section that leads to race conditions is called a critical section

Preventing Race Conditions
To prevent race conditions from occurring you must make sure that the critical section is executed as an atomic instruction. That means that once a single thread is executing it,
no other threads can execute it until the first thread has left the critical section.

Race conditions can be avoided by proper thread synchronization in critical sections. Thread synchronization can be achieved using a synchronized block of Java code.
Thread synchronization can also be achieved using other synchronization constructs like locks or atomic variables like java.util.concurrent.atomic.AtomicInteger.